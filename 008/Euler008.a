;@com.wudsn.ide.asm.hardware=C64
!to "Euler008.prg", cbm 
!cpu 6510
!sl "Euler008.labels"

; BASIC program: (Where run is replaced by its address.)
;   10 SYS run
* = $0801
    !byte <.basend,>.basend,$0A,$00  ; line 10
    !byte $54, $49, $24, $b2, $22    ; TI$="000000":
    !fill $06, $30
    !byte $22, $3a
    !byte $9e                        ; Sys keyword
    !byte (run/1000) % 10 + '0'      ; Address for SYS
    !byte (run/100) % 10 + '0'
    !byte (run/10) % 10 + '0'
    !byte run % 10 + '0'
    !byte $3a, $99, $20, $54, $49    ; :PRINT TI
    !byte 0
.basend !byte 0, 0

mathprec=$05
mathbcdprec=$07

!src "preamble.a"
!src "screen.a"
!src "arithmetic.a"

; This macro prints a string
!macro print_string .str {
    lda #<.str
    sta+1 straddr
    lda #>.str
    sta+1 straddr + 1
    jsr subprint
}
  
.for    !scr "for ", 0
.answer !scr ", the answer is ", 0

.four=*
!byte $04
!fill mathprec - 1, $00

.thirteen=*
!byte $0d
!fill mathprec - 1, $00

run:
   jsr subclearscreen
   
   ldx .four
   jsr find_max_product
   +print_string .for
   +math_set_param_output_integer .four
   jsr math_output_integer
   +print_string .answer
   +math_set_param_output_integer maxproduct
   jsr math_output_integer
   jsr screen_new_line

   ldx .thirteen
   jsr find_max_product
   +print_string .for
   +math_set_param_output_integer .thirteen
   jsr math_output_integer
   +print_string .answer
   +math_set_param_output_integer maxproduct
   jsr math_output_integer
   
   rts

   
!zone zn_max_product {
;
; Calculate the maximum product of X consecutive digits.
;
; Inputs:
;  X: number of consecutive digits to multiply
;
; Outputs:
;  maxproduct: will contain the maximum product.
;
; Side Effects:
;  tmpaddr, mathop1, mathop2 and mathres will all be altered.
;

; loop counter, containing the address of the first digit to multiply
.j=tmpaddr

find_max_product:
   stx .numdigits
   
; point mathop1 and mathres to .m1
   lda #<.m1
   sta mathop1
   sta mathres   
   lda #>.m1
   sta mathop1 + 1
   sta mathres + 1
   
; maxproduct = 0
; .m2 = 0
   lda #$00
   tay
   ldx #mathprec
-  sta maxproduct,y
   sta .m2, y
   iny
   dex
   bne -
   
; .jul = .digits + 1000 - .numdigits
   clc
   lda #<.digits
   adc #$e8
   sta .jul
   lda #>.digits
   adc #$03
   sta .jul + 1
   
   sec
   lda .jul
   sbc .numdigits
   sta .jul
   lda .jul + 1
   sbc #$00
   sta .jul + 1
   
; for .j = .digits; .j < .jul; .j++
; .j = .digits
   lda #<.digits
   sta .j
   lda #>.digits
   sta .j + 1
.forj:
; .m1 = current digit
   lda #$00
   ldy #mathprec - 1
-- sta .m1, y
   dey
   bne --
; copy current digit to least significant byte   
   lda (.j), y
   beq .nextj    ; If the current digit is 0, skip inner loop
   sta .m1
   
; point mathop2 to .m2
   lda #<.m2
   sta mathop2   
   lda #>.m2
   sta mathop2 + 1
   
; for .k = 1; .k < .numdigits; .k ++
   ldy #$01       ; .k = 1
   sty .k
.fork:
; .m2 = the (.j + .k)'th digit
   lda (.j), y
   beq .nextj     ; If this digit is zero, goto next j.
   sta .m2

   ; .m1 *= .m2   
   jsr math_multiply
   
.nextk:
   inc .k           ; .k ++
   ldy .k           ; Compare .k with loop limit
   cpy .numdigits
   bmi .fork        ; branch if .k < .numdigits
   
; Is the current product in .m1 > maxproduct?
; Point mathop2 to maxproduct
   lda #<maxproduct
   sta mathop2
   lda #>maxproduct
   sta mathop2 + 1
   
   jsr math_compare
   bmi .nextj        ; branch if .m1 <  maxproduct
   beq .nextj        ; branch if .m1 == maxproduct
   
; maxproduct = .m1
   ldy #mathprec - 1
.copy:
   lda .m1, y
   sta maxproduct, y
   dey
   bpl .copy
   
.nextj:
   ; .j ++
   clc
   lda #$01
   adc .j
   sta .j
   lda #$00
   adc .j + 1
   sta .j + 1
   ; Is .j < .jul?
   sec
   lda .j
   sbc .jul
   lda .j + 1
   sbc .jul + 1
   bmi .forj       ; branch if .j < .jul

   rts

; The number of consecutive digits to multiply
.numdigits=*
!byte $00

; upper limit of j-loop (.digits + 1000 - .numdigits)
.jul=*
!byte $00, $00

; loop counter, offset from j of the current digit being multiplied
.k=*
!byte $00

; First factor being multipled 
; also accumulates the current product.
.m1=*
!fill mathprec, $00

; Second factor being multiplied.
; This is a copy of the current digit.
.m2=*
!fill mathprec, $00

; Largest product found so far
maxproduct=*
!fill mathprec, $00

.digits=*
!byte 7,3,1,6,7,1,7,6,5,3,1,3,3,0,6,2,4,9,1,9,2,2,5,1,1,9,6,7,4,4,2,6,5,7,4,7,4,2,3,5,5,3,4,9,1,9,4,9,3,4
!byte 9,6,9,8,3,5,2,0,3,1,2,7,7,4,5,0,6,3,2,6,2,3,9,5,7,8,3,1,8,0,1,6,9,8,4,8,0,1,8,6,9,4,7,8,8,5,1,8,4,3
!byte 8,5,8,6,1,5,6,0,7,8,9,1,1,2,9,4,9,4,9,5,4,5,9,5,0,1,7,3,7,9,5,8,3,3,1,9,5,2,8,5,3,2,0,8,8,0,5,5,1,1
!byte 1,2,5,4,0,6,9,8,7,4,7,1,5,8,5,2,3,8,6,3,0,5,0,7,1,5,6,9,3,2,9,0,9,6,3,2,9,5,2,2,7,4,4,3,0,4,3,5,5,7
!byte 6,6,8,9,6,6,4,8,9,5,0,4,4,5,2,4,4,5,2,3,1,6,1,7,3,1,8,5,6,4,0,3,0,9,8,7,1,1,1,2,1,7,2,2,3,8,3,1,1,3
!byte 6,2,2,2,9,8,9,3,4,2,3,3,8,0,3,0,8,1,3,5,3,3,6,2,7,6,6,1,4,2,8,2,8,0,6,4,4,4,4,8,6,6,4,5,2,3,8,7,4,9
!byte 3,0,3,5,8,9,0,7,2,9,6,2,9,0,4,9,1,5,6,0,4,4,0,7,7,2,3,9,0,7,1,3,8,1,0,5,1,5,8,5,9,3,0,7,9,6,0,8,6,6
!byte 7,0,1,7,2,4,2,7,1,2,1,8,8,3,9,9,8,7,9,7,9,0,8,7,9,2,2,7,4,9,2,1,9,0,1,6,9,9,7,2,0,8,8,8,0,9,3,7,7,6
!byte 6,5,7,2,7,3,3,3,0,0,1,0,5,3,3,6,7,8,8,1,2,2,0,2,3,5,4,2,1,8,0,9,7,5,1,2,5,4,5,4,0,5,9,4,7,5,2,2,4,3
!byte 5,2,5,8,4,9,0,7,7,1,1,6,7,0,5,5,6,0,1,3,6,0,4,8,3,9,5,8,6,4,4,6,7,0,6,3,2,4,4,1,5,7,2,2,1,5,5,3,9,7
!byte 5,3,6,9,7,8,1,7,9,7,7,8,4,6,1,7,4,0,6,4,9,5,5,1,4,9,2,9,0,8,6,2,5,6,9,3,2,1,9,7,8,4,6,8,6,2,2,4,8,2
!byte 8,3,9,7,2,2,4,1,3,7,5,6,5,7,0,5,6,0,5,7,4,9,0,2,6,1,4,0,7,9,7,2,9,6,8,6,5,2,4,1,4,5,3,5,1,0,0,4,7,4
!byte 8,2,1,6,6,3,7,0,4,8,4,4,0,3,1,9,9,8,9,0,0,0,8,8,9,5,2,4,3,4,5,0,6,5,8,5,4,1,2,2,7,5,8,8,6,6,6,8,8,1
!byte 1,6,4,2,7,1,7,1,4,7,9,9,2,4,4,4,2,9,2,8,2,3,0,8,6,3,4,6,5,6,7,4,8,1,3,9,1,9,1,2,3,1,6,2,8,2,4,5,8,6
!byte 1,7,8,6,6,4,5,8,3,5,9,1,2,4,5,6,6,5,2,9,4,7,6,5,4,5,6,8,2,8,4,8,9,1,2,8,8,3,1,4,2,6,0,7,6,9,0,0,4,2
!byte 2,4,2,1,9,0,2,2,6,7,1,0,5,5,6,2,6,3,2,1,1,1,1,1,0,9,3,7,0,5,4,4,2,1,7,5,0,6,9,4,1,6,5,8,9,6,0,4,0,8
!byte 0,7,1,9,8,4,0,3,8,5,0,9,6,2,4,5,5,4,4,4,3,6,2,9,8,1,2,3,0,9,8,7,8,7,9,9,2,7,2,4,4,2,8,4,9,0,9,1,8,8
!byte 8,4,5,8,0,1,5,6,1,6,6,0,9,7,9,1,9,1,3,3,8,7,5,4,9,9,2,0,0,5,2,4,0,6,3,6,8,9,9,1,2,5,6,0,7,1,7,6,0,6
!byte 0,5,8,8,6,1,1,6,4,6,7,1,0,9,4,0,5,0,7,7,5,4,1,0,0,2,2,5,6,9,8,3,1,5,5,2,0,0,0,5,5,9,3,5,7,2,9,7,2,5
!byte 7,1,6,3,6,2,6,9,5,6,1,8,8,2,6,7,0,4,2,8,2,5,2,4,8,3,6,0,0,8,2,3,2,5,7,5,3,0,4,2,0,7,5,2,9,6,3,4,5,0
}
