;@com.wudsn.ide.asm.hardware=C64
!to "Euler014.prg", cbm 
!cpu 6510
!sl "Euler014.labels"

; BASIC program: (Where .run is replaced by its address.)
;   10 SYS .run
* = $0801
    !byte <.basend,>.basend,$0A,$00,$9e
    !byte .run/10000 + '0'    
    !byte .run/1000 % 10 + '0'    
    !byte .run/100 % 10 + '0'   
    !byte .run/10 % 10 + '0' 
    !byte .run % 10 + '0' 
    !byte 0
.basend !byte 0, 0

mathprec=$03
mathbcdprec=$04

!source "arithmetic.a"
!source "Collatz.a"

; strings
strlongest !scr "longest chain: ", 0
strstartvalue !scr "starting value: ", 0

; Clear screen before running
.run
    jsr subclearscreen
    jmp euler014

; upper limit (not inclusive) of loop
onemillion=*
!byte $40, $42, $0f

; The length of the currently longest chain.
longestchainlength=*
!fill mathprec, $00

; The starting number of the currently longest
; chain.
longeststartingnumber=*
!fill mathprec, 0

; Current starting number being checked (loop index)
j=*
!fill mathprec, 0

; Argument to pass to the Collatz Length subroutine
collatzarg=*
!fill mathprec, 0

euler014:
; j = 2
   lda #$02
   sta j

.forj:
; Copy j to collatzarg
   ldy #mathprec - 1
.copyj:
   lda j, y
   sta collatzarg, y
   dey
   bpl .copyj

; calculate the chain length
   lda #<collatzarg        ; point mathop1 to collatzarg
   sta mathop1
   lda #>collatzarg
   sta mathop1 + 1

   jsr collatz_length      ; calculate the chain length

; Is the result > longestchainlength?
   lda #<collatz_length_result   ; point mathop1 to collatz_length_result
   sta mathop1
   lda #>collatz_length_result
   sta mathop1 + 1
   lda #<longestchainlength      ; point mathop2 to longestchainlength
   sta mathop2
   lda #>longestchainlength
   sta mathop2 + 1
   jsr math_compare
   bmi .nextj                    ; if (mathop1) < (mathop2) goto .nextj

; Copy the current values to the longest ones.
   ldy #mathprec - 1
.copyloop:
   lda j, y
   sta longeststartingnumber, y
   lda collatz_length_result, y
   sta longestchainlength, y
   dey
   bne .copyloop

.nextj:
   ldx #$00
.incrementj
   inc j, x
   bne .testj           ; branch if no carry to the next byte
   inx                  ; advance to next byte of j
   cpx #mathprec        ; Check for overflow
   beq .overflow2
   bmi .incrementj
.testj:
   lda #<j              ; set mathop1 to point to j
   sta mathop1
   lda #>j
   sta mathop1 + 1
   lda #<onemillion     ; set mathop2 to point to onemillion
   sta mathop2
   lda #>onemillion
   sta mathop2 + 1
   jsr math_compare     ; compare j to onemillion
   bmi .forj            ; loop if j < 1,000,000

;
; output result
;
   lda #<strlongest     ; point straddr to the longest chain string
   sta straddr
   lda #>strlongest
   sta straddr + 1
   jsr subprint         ; print it
  
   ; print the longest chain length
   +screen_set_param_outputinteger longestchainlength
   jsr screen_outputinteger

   lda #<strstartvalue  ; point str addr to the starting value string
   sta straddr
   lda #>strstartvalue
   sta straddr + 1
   jsr subprint         ; print it

   ; print the starting value
   +screen_set_param_outputinteger longeststartingnumber
   jsr screen_outputinteger

   rts

.overflow2
   +overflow
