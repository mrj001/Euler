;@com.wudsn.ide.asm.hardware=C64
!to "TestCollatzNext.prg", cbm 
!cpu 6510
!sl "TestCollatzNext.labels"

; BASIC program: (Where .run is replaced by its address.)
;   10 SYS .run
* = $0801
    !byte <.basend,>.basend,$0A,$00,$9e
    !byte .run/10000 + '0'    
    !byte .run/1000 % 10 + '0'    
    !byte .run/100 % 10 + '0'   
    !byte .run/10 % 10 + '0' 
    !byte .run % 10 + '0' 
    !byte 0
.basend !byte 0, 0

mathprec=$03
mathbcdprec=$04

!source "../libs/arithmetic.a"
!source "Collatz.a"

; This macro prints the label for the current test
!macro print_label .lbl {
    lda #<.lbl
    sta+1 straddr
    lda #>.lbl
    sta+1 straddr + 1 
    jsr subprint
}

pass !scr "pass", 13, 0
fail !scr "fail", 13, 0

; This macro asserts that the integers pointed to by
; the two parameters are equal.
!macro assert_equal .expected, .actual {
   ldy #mathprec - 1
.fory:
   lda .expected, y
   cmp .expected, y
   bne .fail
   dey
   bpl .fory

.pass:
    lda #<pass
    sta+1 straddr
    lda #>pass
    sta+1 straddr + 1 
    jmp .output

.fail:
    lda #<fail
    sta+1 straddr
    lda #>fail
    sta+1 straddr + 1 

.output:
   jsr subprint
}

; Clear screen before running tests
.run
    jsr subclearscreen
    jmp test1

!zone test1 {
;
; Test 1: generate the next value for an odd number
;
.a1=*
!byte $0d
!fill mathprec - 1, 0

.expected=*
!byte $28
!fill mathprec - 1, 0

.actual=*
!fill mathprec, 0

.lbl !scr "one: ",0

test1
    +print_label .lbl

; copy input to actual
    ldy #mathprec - 1
.for1:
    lda .a1, y
    sta .actual, y
    dey
    bpl .for1

; point mathop1 at actual
    lda #<.actual
    sta mathop1
    lda #>.actual
    sta mathop1 + 1

    jsr collatz_next

    +assert_equal .expected, .actual

    jmp test2
}

!zone test2 {
;
; Test 2: generate the next value for an even number
;
.a2=*
!byte $28
!fill mathprec - 1, $00

.expected=*
!byte $14
!fill mathprec - 1, $00

.actual=*
!fill mathprec, $00

.lbl !scr "two: ",0

test2
    +print_label .lbl

; copy input to actual
    ldy #mathprec - 1
.for1:
    lda .a2, y
    sta .actual, y
    dey
    bpl .for1

; point mathop1 at actual
    lda #<.actual
    sta mathop1
    lda #>.actual
    sta mathop1 + 1

    jsr collatz_next

    +assert_equal .expected, .actual

    jmp test3
}

!zone test2 {
;
; Test 3: generate the next value for a second odd number
;
.a2=*
!byte $05
!fill mathprec - 1, $00

.expected=*
!byte $10
!fill mathprec - 1, $00

.actual=*
!fill mathprec, $00

.lbl !scr "three: ",0

test3
    +print_label .lbl

; copy input to actual
    ldy #mathprec - 1
.for1:
    lda .a2, y
    sta .actual, y
    dey
    bpl .for1

; point mathop1 at actual
    lda #<.actual
    sta mathop1
    lda #>.actual
    sta mathop1 + 1

    jsr collatz_next

    +assert_equal .expected, .actual

    rts
}

