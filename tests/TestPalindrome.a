;@com.wudsn.ide.asm.hardware=C64
!to "TestPalindrome.prg", cbm 
!cpu 6510
!sl "TestPalindrome.labels"

; BASIC program: (Where .run is replaced by its address.)
;   10 SYS .run
* = $0801
    !byte <.basend,>.basend,$0A,$00,$9e
    !byte .run/10000 + '0'    
    !byte .run/1000 % 10 + '0'    
    !byte .run/100 % 10 + '0'   
    !byte .run/10 % 10 + '0' 
    !byte .run % 10 + '0' 
    !byte 0
.basend !byte 0, 0

mathprec=$04
mathbcdprec=$05

!source "../libs/preamble.a"
!source "../libs/screen.a"
!source "../libs/arithmetic.a"
!source "../libs/palindrome.a"

; This macro prints the label for the current test
!macro print_label .lbl {
    lda #<.lbl
    sta+1 straddr
    lda #>.lbl
    sta+1 straddr + 1
    jsr subprint
}

pass !scr "pass", 13, 0
fail !scr "fail", 13, 0

.run:
   jsr subclearscreen
   jmp test1

!zone test1 {
;
; Test 1: Check a palindrome
;
.a1=*
!byte $31, $23
!fill mathprec - 2, $00

.l1 !scr "one: ", 0

test1:
   ; set up
   +print_label .l1
   lda #<.a1
   sta mathop1
   lda #>.a1
   sta mathop1 + 1

   ; action
   jsr is_palindrome

   ; assert
   bne .fail

.pass
   lda #<pass
   sta straddr
   lda #>pass
   sta straddr + 1
   jmp .result

.fail
   lda #<fail
   sta straddr
   lda #>fail
   sta straddr + 1

.result
   jsr subprint

   jmp test2
}

!zone test2 {
;
; Test 2: Check a non-palindrome
;
.a1=*
!byte $55, $f7, $e0
!fill mathprec - 3, $00

.lbl !scr "two: ", 0

test2:
   ; set up
   +print_label .lbl
   lda #<.a1
   sta mathop1
   lda #>.a1
   sta mathop1 + 1

   ; action
   jsr is_palindrome

   ; assert
   beq .fail

.pass
   lda #<pass
   sta straddr
   lda #>pass
   sta straddr + 1
   jmp .result

.fail
   lda #<fail
   sta straddr
   lda #>fail
   sta straddr + 1

.result
   jsr subprint

   rts
}

