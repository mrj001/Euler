;@com.wudsn.ide.asm.hardware=C64
!to "TestMultiplyByte.prg", cbm 
!cpu 6510
!sl "TestMultiplyByte.labels"

; BASIC program: (Where .run is replaced by its address.)
;   10 SYS .run
* = $0801
    !byte <.basend,>.basend,$0A,$00,$9e
    !byte .run/10000 + '0'    
    !byte .run/1000 % 10 + '0'    
    !byte .run/100 % 10 + '0'   
    !byte .run/10 % 10 + '0' 
    !byte .run % 10 + '0' 
    !byte 0
.basend !byte 0, 0

!source "../libs/preamble.a"
!source "../libs/arithmetic.a"

; This macro prints the label for the current test
!macro print_label .lbl {
    lda #<.lbl
    sta+1 straddr
    lda #>.lbl
    sta+1 straddr + 1
    jsr subprint
}

pass !scr "pass", 13, 0
fail !scr "fail", 13, 0

.run:
   jmp test1

!zone test1 {
;
; Test 1: Multiply 0 times a non-zero number
;
.lbl !scr "one: ", 0

test1:
    jsr subclearscreen

    ; set up
    +print_label .lbl
    lda #$00
    ldy #$6c

    ; action
    jsr math_multiply_byte

    ; assert
    lda product_byte
    bne .fail
    lda product_byte + 1
    bne .fail

.pass
    lda #<pass
    sta straddr
    lda #>pass
    sta straddr + 1
    jmp .result

.fail
    lda #<fail
    sta straddr
    lda #>fail
    sta straddr + 1

.result
    jsr subprint

    jmp test2
}

!zone test2 {
;
; Test 2: multiply a non-zero number by 0
;
.lbl !scr "two: ", 0

test2:
    ; set up
    +print_label .lbl
    lda #$ab
    ldy #$00

    ; action
    jsr math_multiply_byte

    ; assert
    lda product_byte
    bne .fail
    lda product_byte + 1
    bne .fail

.pass
    lda #<pass
    sta straddr
    lda #>pass
    sta straddr + 1
    jmp .result

.fail
    lda #<fail
    sta straddr
    lda #>fail
    sta straddr + 1

.result
    jsr subprint

    jmp test3
}

!zone test3 {
;
; Test 3: Multiply 1 by a number
;
.lbl !scr "three: ", 0

test3:
    ; set up
    +print_label .lbl
    lda #$01
    ldy #$7c

    ; action
    jsr math_multiply_byte

    ; assert
    lda product_byte
    cmp #$7c
    bne .fail
    lda product_byte + 1
    bne .fail

.pass
    lda #<pass
    sta straddr
    lda #>pass
    sta straddr + 1
    jmp .result

.fail
    lda #<fail
    sta straddr
    lda #>fail
    sta straddr + 1

.result
    jsr subprint

    jmp test4
}

!zone test4 {
;
; Test 4: Multiply a number by 1
;
.lbl !scr "four: ", 0

test4:
    ; set up
    +print_label .lbl
    lda #$c7
    ldy #$01

    ; action
    jsr math_multiply_byte

    ; assert
    lda product_byte
    cmp #$c7
    bne .fail
    lda product_byte + 1
    bne .fail

.pass
    lda #<pass
    sta straddr
    lda #>pass
    sta straddr + 1
    jmp .result

.fail
    lda #<fail
    sta straddr
    lda #>fail
    sta straddr + 1

.result
    jsr subprint

    jmp test5
}

!zone test5 {
;
; Test 5: Multiply two numbers (neither is one or zero)
;
.expected=*
!byte $c7, $71
.lbl !scr "five: ", 0

test5:
    ; set up
    +print_label .lbl
    lda #$85
    ldy #$db

    ; action
    jsr math_multiply_byte

    ; assert
    lda product_byte
    cmp .expected
    bne .fail
    lda product_byte + 1
    cmp .expected + 1
    bne .fail

.pass
    lda #<pass
    sta straddr
    lda #>pass
    sta straddr + 1
    jmp .result

.fail
    lda #<fail
    sta straddr
    lda #>fail
    sta straddr + 1

.result
    jsr subprint

    rts
}

