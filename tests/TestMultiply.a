;@com.wudsn.ide.asm.hardware=C64
!to "TestMultiply.prg", cbm 
!cpu 6510
!sl "TestMultiply.labels"

; BASIC program: (Where .run is replaced by its address.)
;   10 SYS .run
* = $0801
    !byte <.basend,>.basend,$0A,$00,$9e
    !byte .run/10000 + '0'    
    !byte .run/1000 % 10 + '0'    
    !byte .run/100 % 10 + '0'   
    !byte .run/10 % 10 + '0' 
    !byte .run % 10 + '0' 
    !byte 0
.basend !byte 0, 0

mathprec=$42
mathbcdprec=$4f

!source "../libs/preamble.a"
!source "../libs/arithmetic.a"

; This macro prints the label for the current test
!macro print_label .lbl {
    lda #<.lbl
    sta+1 straddr
    lda #>.lbl
    sta+1 straddr + 1
    jsr subprint
}

!macro assert .expected, .actual {
   lda #<.expected
   sta mathop1
   lda #>.expected
   sta mathop1 + 1
   lda #<.actual
   sta mathop2
   lda #>.actual
   sta mathop2 + 1

   ldy #mathprec
   dey
-  lda (mathop1), y
   cmp (mathop2), y
   bne .fail

.pass
    lda #<pass
    sta straddr
    lda #>pass
    sta straddr + 1
    jmp .result

.fail
    lda #<fail
    sta straddr
    lda #>fail
    sta straddr + 1

.result
    jsr subprint
}

pass !scr "pass", 13, 0
fail !scr "fail", 13, 0

.run:
   jmp test1

!zone test1 {
;
; Test 1: Multiply 0 times a non-zero number
;
.m1=*
!fill mathprec, 0
.m2=*
!byte $f8, $d9, $a1, $db
!fill mathprec - 4, 0
.expected
!fill mathprec, 0
.actual
!fill mathprec, $ff
.lbl !scr "one: ", 0

test1:
    jsr subclearscreen

    ; set up
    +print_label .lbl
    +math_set_param_multiply .m1, .m2, .actual

    ; action
    jsr math_multiply

    ; assert
    +assert .expected, .actual

    jmp test2
}

!zone test2 {
;
; Test 2: multiply a non-zero number by 0
;
.m1=*
!byte $ab, $00, $00, $00
!fill mathprec - 4, $00
.m2=*
!fill mathprec, $00
.expected
!fill mathprec, $00
.actual
!fill mathprec, $ff

.lbl !scr "two: ", 0

test2:
    ; set up
    +print_label .lbl
    +math_set_param_multiply .m1, .m2, .actual

    ; action
    jsr math_multiply

    ; assert
    +assert .expected, .actual

    jmp test3
}

!zone test3 {
;
; Test 3: Multiply 1 by a number
;
.m1=*
!byte $01, $00, $00, $00
!fill mathprec - 4, $00
.m2=*
!byte $77, $67, $c6, $d7
!fill mathprec - 4, $00
.expected=*
!byte $77, $67, $c6, $d7
!fill mathprec - 4, $00
.actual=*
!fill mathprec, $00
.lbl !scr "three: ", 0

test3:
    ; set up
    +print_label .lbl
    +math_set_param_multiply .m1, .m2, .actual

    ; action
    jsr math_multiply

    ; assert
    +assert .expected, .actual

    jmp test4
}

!zone test4 {
;
; Test 4: Multiply a number by 1
;
.m1=*
!byte $77, $67, $c6, $d7
!fill mathprec - 4, $00
.m2=*
!byte $01, $00, $00, $00
!fill mathprec - 4, $00
.expected=*
!byte $77, $67, $c6, $d7
!fill mathprec - 4, $00
.actual=*
!fill mathprec, $00
.lbl !scr "four: ", 0

test4:
    ; set up
    +print_label .lbl
    +math_set_param_multiply .m1, .m2, .actual

    ; action
    jsr math_multiply

    ; assert
    +assert .expected, .actual

    jmp test5
}

!zone test5 {
;
; Test 5: Multiply two numbers (neither is one or zero)
; There are no carries required during addition of 
; partial products.
;
.m1=*
!byte $8f, $1b, $00, $00
!fill mathprec - 4, $00
.m2=*
!byte $98, $78, $00, $00
!fill mathprec - 4, $00
.actual=*
!fill mathprec, $00
.expected=*
!byte $e8, $64, $fb, $0c
!fill mathprec - 4, $00
.lbl !scr "five: ", 0

test5:
    ; set up
    +print_label .lbl
    +math_set_param_multiply .m1, .m2, .actual

    ; action
    jsr math_multiply

    ; assert
    +assert .expected, .actual

    jmp test6
}

!zone test6 {
;
; Test 6: Multiply two numbers (neither is one or zero)
; Carries are require during addition of partial products.
;
.m1=*
!byte $dc, $eb, $00, $00
!fill mathprec - 4, $00
.m2=*
!byte $ed, $fe, $00, $00
!fill mathprec - 4, $00
.actual=*
!fill mathprec, $00
.expected=*
!byte $a2, $ac, $de, $ea
!fill mathprec - 4, $00
.lbl !scr "six: ", 0

test6:
    ; set up
    +print_label .lbl
    +math_set_param_multiply .m1, .m2, .actual

    ; action
    jsr math_multiply

    ; assert
    +assert .expected, .actual

    rts
}  ; end of zone test6

