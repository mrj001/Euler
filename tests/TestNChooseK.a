;@com.wudsn.ide.asm.hardware=C64
!to "TestNChooseK.prg", cbm 
!cpu 6510
!sl "TestNChooseK.labels"

; BASIC program: (Where .run is replaced by its address.)
;   10 SYS .run
* = $0801
    !byte <.basend,>.basend,$0A,$00,$9e
    !byte .run/10000 + '0'    
    !byte .run/1000 % 10 + '0'    
    !byte .run/100 % 10 + '0'   
    !byte .run/10 % 10 + '0' 
    !byte .run % 10 + '0' 
    !byte 0
.basend !byte 0, 0

mathprec=$05
mathbcdprec=$07

!source "../libs/preamble.a"
!source "../libs/screen.a"
!source "../libs/arithmetic.a"

; This macro prints strings
!macro print_string .lbl {
   lda #<.lbl
   sta+1 straddr
   lda #>.lbl
   sta+1 straddr + 1 
   jsr subprint
}

pass !scr "pass", 13, 0
fail !scr "fail", 13, 0

; Clear screen before running tests
.run
   jsr subclearscreen
   jmp test1

!zone test1 {
;
; Test 1: choose 2 items out of 4
;
.k=*
!byte $02
.n=*
!byte $04
.expected=*
!byte $06
.lbl !scr "one: ",0

test1
   +print_string .lbl

   ldx .n
   ldy .k
   jsr math_n_choose_k

   ; compare least significant byte
   lda .expected
   cmp nchoosek
   bne .fail

   ; ensure remaing result bytes are all zero
   ldy #mathprec - 1
   lda #$00
-   cmp nchoosek, y
   bne .fail
   dey
   bne -

.pass
   lda #<pass
   sta straddr
   lda #>pass
   sta straddr + 1
   jmp .output

.fail
   lda #<fail
   sta straddr
   lda #>fail
   sta straddr + 1

.output
   jsr subprint

   jmp test2
}

!zone test2 {
;
; Test 2: number of possible poker hands, 52 Choose 5
;
.k=*
!byte $05
.n=*
!byte $34
.expected=*
!byte $30, $A8, $27
!fill mathprec - 3, $00
.lbl !scr "two: ",0

test2
   +print_string .lbl

   ldx .n
   ldy .k
   jsr math_n_choose_k

   +math_set_param_compare nchoosek, .expected
   jsr math_compare
   bne .fail

.pass
   lda #<pass
   sta straddr
   lda #>pass
   sta straddr + 1
   jmp .output

.fail
   lda #<fail
   sta straddr
   lda #>fail
   sta straddr + 1

.output
   jsr subprint

   jmp test3
}

!zone test3 {
;
; Test 3: Edge case, pick 0 of 13 items
;
.k=*
!byte $00
.n=*
!byte $0d
.expected=*
!byte $01
.lbl !scr "three: ",0

test3:
   +print_string .lbl

   ldx .n
   ldy .k
   jsr math_n_choose_k

   lda nchoosek
   cmp .expected
   bne .fail

   ; confirm remaining bytes are all zero
   ldy #mathprec - 1
-  lda nchoosek, y
   bne .fail
   dey
   bne -

.pass
   lda #<pass
   sta straddr
   lda #>pass
   sta straddr + 1
   jmp .output

.fail
   lda #<fail
   sta straddr
   lda #>fail
   sta straddr + 1

.output
   jsr subprint

   jmp test4
}

!zone test4 {
;
; Test 3: Edge case, pick 7 of 7 items
;
.k=*
!byte $07
.n=*
!byte $07
.expected=*
!byte $01
!fill mathprec - 3, $00
.lbl !scr "four: ",0

test4:
   +print_string .lbl

   ldx .n
   ldy .k
   jsr math_n_choose_k

   lda nchoosek
   cmp .expected
   bne .fail

   ; confirm remaining bytes are all zero
   ldy #mathprec - 1
-  lda nchoosek, y
   bne .fail
   dey
   bne -

.pass
   lda #<pass
   sta straddr
   lda #>pass
   sta straddr + 1
   jmp .output

.fail
   lda #<fail
   sta straddr
   lda #>fail
   sta straddr + 1

.output
   jsr subprint

}

   jsr screen_set_basic_cursor
   rts

