;@com.wudsn.ide.asm.hardware=C64
!to "TestRotateLeft.prg", cbm 
!cpu 6510
!sl "TestRotateLeft.labels"

; BASIC program: (Where .run is replaced by its address.)
;   10 SYS .run
* = $0801
    !byte <.basend,>.basend,$0A,$00,$9e
    !byte .run/10000 + '0'    
    !byte .run/1000 % 10 + '0'    
    !byte .run/100 % 10 + '0'   
    !byte .run/10 % 10 + '0' 
    !byte .run % 10 + '0' 
    !byte 0
.basend !byte 0, 0

!source "../libs/arithmetic.a"

; This macro prints the label for the current test
!macro print_label .lbl {
    lda #<.lbl
    sta+1 straddr
    lda #>.lbl
    sta+1 straddr + 1 
    jsr subprint
}

; This macro sets the parameters for the math_isequal subroutine.
!macro set_param_isequal .prec, .op1, .op2 {
    lda #.prec         ; set precision to .prec
    sta+1 mathprec
    lda #<.op1         ; operand 1
    sta+1 mathop1
    lda #>.op1
    sta+1 mathop1 + 1 
    lda #<.op2         ; operand 2
    sta+1 mathop2
    lda #>.op2
    sta+1 mathop2 + 1 
}

pass !scr "pass", 13, 0
fail !scr "fail", 13, 0

; Clear screen before running tests
.run
    jsr subclearscreen
    jmp test1

!zone test1 {
;
; Test 1: rotate a single byte integer with most 
;    significant bit clear
;
.a1=*
!byte $2d
.expected1=*
!byte $5a
.l1 !scr "one: ",0

test1
    +print_label .l1
    lda #$01                             ; set precision
    sta mathprec
    +set_param_rol .a1

    jsr math_rol

    bcs .fail                            ; carry must be clear

    lda .a1
    cmp .expected1;
    bne .fail

.pass
    lda #<pass
    sta straddr
    lda #>pass
    sta straddr + 1
    jmp .output

.fail
    lda #<fail
    sta straddr
    lda #>fail
    sta straddr + 1

.output
    jsr subprint

    jmp test2
}

!zone test2 {
;
; Test 2: rotate a single byte integer with the 
;    most significant bit set
;
.a2=*
!byte $d2
.expected2=*
!byte $a4
.actual2=*
!byte $00, $00, $00
.l2 !scr "two: ",0

test2
    +print_label .l2
    lda #$01                  ; set precision
    sta mathprec
    +set_param_rol .a2

    jsr math_rol

    bcc .fail                 ; carry must be set

    lda .a2
    cmp .expected2;
    bne .fail

.pass
    lda #<pass
    sta straddr
    lda #>pass
    sta straddr + 1
    jmp .output

.fail
    lda #<fail
    sta straddr
    lda #>fail
    sta straddr + 1

.output
    jsr subprint

    jmp test3
}

!zone test3 {
;
; Test 3: rotate a 5-byte integer.
;   Individual bytes vary in whether or not the 
;   most significant bit is set.  The most significant
;   bit of the entire 5-byte integer is set.
.a3=*
!byte $71, $e6, $c5, $0c, $c7
.expected3=*
!byte $e2, $cc, $8b, $19, $8e
.l3 !scr "three: ", 0

test3
    +print_label .l3
    lda #$05                  ; set precision
    sta mathprec
    +set_param_rol .a3

    jsr math_rol

    bcc .fail                 ; carry must be set

    ldy mathprec              ; compare all bytes of result
    dey                       ; subtract one for index of last byte
.compare_loop
    lda .a3, y
    cmp .expected3, y;
    bne .fail
    dey
    bpl .compare_loop

.pass
    lda #<pass
    sta straddr
    lda #>pass
    sta straddr + 1
    jmp .output

.fail
    lda #<fail
    sta straddr
    lda #>fail
    sta straddr + 1

.output
    jsr subprint

    jmp test4
}

!zone test4 {
;
; Test 4: rotate a 5-byte integer.
;   Individual bytes vary in whether or not the 
;   most significant bit is set.  The most significant
;   bit of the entire 5-byte integer is clear.
.a4=*
!byte $67, $db, $e4, $b0, $6f
.expected4=*
!byte $ce, $b6, $c9, $61, $df
.l4 !scr "four: ", 0

test4
    +print_label .l4
    lda #$05                  ; set precision
    sta mathprec
    +set_param_rol .a4

    jsr math_rol

    bcs .fail                 ; carry must be clear

    ldy mathprec              ; compare all bytes of result
    dey                       ; subtract one for index of last byte
.compare_loop
    lda .a4, y
    cmp .expected4, y;
    bne .fail
    dey
    bpl .compare_loop

.pass
    lda #<pass
    sta straddr
    lda #>pass
    sta straddr + 1
    jmp .output

.fail
    lda #<fail
    sta straddr
    lda #>fail
    sta straddr + 1

.output
    jsr subprint

    rts
}

