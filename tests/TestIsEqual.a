;@com.wudsn.ide.asm.hardware=C64
!to "TestIsEqual.prg", cbm 
!cpu 6510
!sl "TestIsEqual.labels"

; BASIC program: (Where .run is replaced by its address.)
;   10 SYS .run
* = $0801
    !byte <.basend,>.basend,$0A,$00,$9e
    !byte .run/10000 + '0'    
    !byte .run/1000 % 10 + '0'    
    !byte .run/100 % 10 + '0'   
    !byte .run/10 % 10 + '0' 
    !byte .run % 10 + '0' 
    !byte 0
.basend !byte 0, 0

mathprec=$04
mathbcdprec=$05

!source "../libs/preamble.a"
!source "../libs/arithmetic.a"

; This macro prints the label for the current test
!macro print_label .lbl {
    lda #<.lbl
    sta+1 straddr
    lda #>.lbl
    sta+1 straddr + 1
    jsr subprint
}

; This macro sets the parameters for the math_isequal subroutine.
!macro set_param .op1, .op2 {
    lda #<.op1         ; operand 1
    sta+1 mathop1
    lda #>.op1
    sta+1 mathop1 + 1
    lda #<.op2         ; operand 2
    sta+1 mathop2
    lda #>.op2
    sta+1 mathop2 + 1
}

pass !scr "pass", 13, 0
fail !scr "fail", 13, 0

; This macro prints out pass if the Z flag is set
; and fail if the Z flag is clear.
!macro assert_equal {
    bne .testfail
    lda #<pass
    sta+1 straddr
    lda #>pass
    sta+1 straddr + 1
    jmp .end
.testfail:
    lda #<fail
    sta+1 straddr
    lda #>fail
    sta+1 straddr + 1
.end
    jsr subprint
}

; This macro prints out pass if the Z flag is clear
; and fail if the Z flag is set.
!macro assert_not_equal {
    beq .testfail
    lda #<pass
    sta+1 straddr
    lda #>pass
    sta+1 straddr + 1
    jmp .end
.testfail:
    lda #<fail
    sta+1 straddr
    lda #>fail
    sta+1 straddr + 1
.end
    jsr subprint
}

;
; Test 1: add two single byte integers
;
.a1=*
!byte 5, 0, 0, 0
.a2=*
!byte 52, 0, 0, 0
.l1 !scr "one: ", 0

.run
    jsr subclearscreen

    +print_label .l1
    +set_param .a1, .a2

    jsr math_isequal

    +assert_not_equal

    jmp .test2

;
; Test 2: compare two 2-byte integers that differ in the low
; order byte.
;
.b1=*
!byte $05
!byte $DE, $00, $00
.b2=*
!byte $06
!byte $DE, $00, $00
.l2 !scr "two: ", 0
.test2
    +print_label .l2
    +set_param .b1, .b2

    jsr math_isequal

    +assert_not_equal

    jmp .test3

;
; Test 3: compare two 4-byte integers that are equal
;
.c1=*
!byte $44, $21, $44, 0x83
.c2=*
!byte $44, $21, $44, 0x83
.l3 !scr "three: ", 0

.test3
    +print_label .l3
    +set_param .c1, .c2

    jsr math_isequal

    +assert_equal

    rts           ; TODO add additional tests

