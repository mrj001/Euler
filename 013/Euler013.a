;@com.wudsn.ide.asm.hardware=C64
!to "Euler013.prg", cbm 
!cpu 6510
!sl "Euler013.labels"

; BASIC program: (Where run is replaced by its address.)
;   10 SYS run
* = $0801
    !byte <.basend,>.basend,$0A,$00  ; line 10
    !byte $54, $49, $24, $b2, $22    ; TI$="000000":
    !fill $06, $30
    !byte $22, $3a
    !byte $9e                        ; Sys keyword
    !byte (run/1000) % 10 + '0'      ; Address for SYS
    !byte (run/100) % 10 + '0'
    !byte (run/10) % 10 + '0'
    !byte run % 10 + '0'
    !byte $3a, $99, $20, $54, $49    ; :PRINT TI
    !byte 0
.basend !byte 0, 0

mathprec=$04
mathbcdprec=$05

!src "preamble.a"
!src "screen.a"

; This macro prints a string
!macro print_string .str {
    lda #<.str
    sta+1 straddr
    lda #>.str
    sta+1 straddr + 1
    jsr subprint
}
  
.answer !scr "the answer is ", 0

;--------------------------------------------------------------------
; The 100 50-digit numbers to add up.
; Note these are stored in big endian format as they were copied
; and pasted from the Project Euler problem
; Numbers are in binary coded decimal.
;--------------------------------------------------------------------
.numbers=*
!byte $37, $10, $72, $87, $53, $39, $02, $10, $27, $98, $79, $79, $98, $22, $08, $37, $59, $02, $46, $51, $01, $35, $74, $02, $50
!byte $46, $37, $69, $37, $67, $74, $90, $00, $97, $12, $64, $81, $24, $89, $69, $70, $07, $80, $50, $41, $70, $18, $26, $05, $38
!byte $74, $32, $49, $86, $19, $95, $24, $74, $10, $59, $47, $42, $33, $30, $95, $13, $05, $81, $23, $72, $66, $17, $30, $96, $29
!byte $91, $94, $22, $13, $36, $35, $74, $16, $15, $72, $52, $24, $30, $56, $33, $01, $81, $10, $72, $40, $61, $54, $90, $82, $50
!byte $23, $06, $75, $88, $20, $75, $39, $34, $61, $71, $17, $19, $80, $31, $04, $21, $04, $75, $13, $77, $80, $63, $24, $66, $76
!byte $89, $26, $16, $70, $69, $66, $23, $63, $38, $20, $13, $63, $78, $41, $83, $83, $68, $41, $78, $73, $43, $61, $72, $67, $57
!byte $28, $11, $28, $79, $81, $28, $49, $97, $94, $08, $06, $54, $81, $93, $15, $92, $62, $16, $91, $27, $58, $89, $83, $27, $38
!byte $44, $27, $42, $28, $91, $74, $32, $52, $03, $21, $92, $35, $89, $42, $28, $76, $79, $64, $87, $67, $02, $72, $18, $93, $18
!byte $47, $45, $14, $45, $73, $60, $01, $30, $64, $39, $09, $11, $67, $21, $68, $56, $84, $45, $88, $71, $16, $03, $15, $32, $76
!byte $70, $38, $64, $86, $10, $58, $43, $02, $54, $39, $93, $96, $19, $82, $89, $17, $59, $36, $65, $68, $67, $57, $93, $49, $51
!byte $62, $17, $64, $57, $14, $18, $56, $56, $06, $29, $50, $21, $57, $22, $31, $96, $58, $67, $55, $07, $93, $24, $19, $33, $31
!byte $64, $90, $63, $52, $46, $27, $41, $90, $49, $29, $10, $14, $32, $44, $58, $13, $82, $26, $63, $34, $79, $44, $75, $81, $78
!byte $92, $57, $58, $67, $71, $83, $37, $21, $76, $61, $96, $37, $51, $59, $05, $79, $23, $97, $28, $24, $55, $98, $83, $84, $07
!byte $58, $20, $35, $65, $32, $53, $59, $39, $90, $08, $40, $26, $33, $56, $89, $48, $83, $01, $89, $45, $86, $28, $22, $78, $28
!byte $80, $18, $11, $99, $38, $48, $26, $28, $20, $14, $27, $81, $94, $13, $99, $40, $56, $75, $87, $15, $11, $70, $09, $43, $90
!byte $35, $39, $86, $64, $37, $28, $27, $11, $26, $53, $82, $99, $87, $24, $07, $84, $47, $30, $53, $19, $01, $04, $29, $35, $86
!byte $86, $51, $55, $06, $00, $62, $95, $86, $48, $61, $53, $20, $75, $27, $33, $71, $95, $91, $91, $42, $05, $17, $25, $58, $29
!byte $71, $69, $38, $88, $70, $77, $15, $46, $64, $99, $11, $55, $93, $48, $76, $03, $53, $29, $21, $71, $49, $70, $05, $69, $38
!byte $54, $37, $00, $70, $57, $68, $26, $68, $46, $24, $62, $14, $95, $65, $00, $76, $47, $17, $87, $29, $44, $38, $37, $76, $04
!byte $53, $28, $26, $54, $10, $87, $56, $82, $84, $43, $19, $11, $90, $63, $46, $94, $03, $78, $55, $21, $77, $79, $29, $51, $45
!byte $36, $12, $32, $72, $52, $50, $00, $29, $60, $71, $07, $50, $82, $56, $38, $15, $65, $67, $10, $88, $52, $58, $35, $07, $21
!byte $45, $87, $65, $76, $17, $24, $10, $97, $64, $47, $33, $91, $10, $60, $72, $18, $26, $52, $36, $87, $72, $23, $63, $60, $45
!byte $17, $42, $37, $06, $90, $58, $51, $86, $06, $60, $44, $82, $07, $62, $12, $09, $81, $32, $87, $86, $07, $33, $96, $94, $12
!byte $81, $14, $26, $60, $41, $80, $86, $83, $06, $19, $32, $84, $60, $81, $11, $91, $06, $15, $56, $94, $05, $12, $68, $96, $92
!byte $51, $93, $43, $25, $45, $17, $28, $38, $86, $41, $91, $80, $47, $04, $92, $93, $21, $50, $58, $64, $25, $63, $04, $94, $83
!byte $62, $46, $72, $21, $64, $84, $35, $07, $62, $01, $72, $79, $18, $03, $99, $44, $69, $30, $04, $73, $29, $56, $34, $06, $91
!byte $15, $73, $24, $44, $38, $69, $08, $12, $57, $94, $51, $40, $89, $05, $77, $06, $22, $94, $29, $19, $71, $07, $92, $82, $09
!byte $55, $03, $76, $87, $52, $56, $78, $77, $30, $91, $86, $25, $40, $74, $49, $69, $84, $45, $08, $33, $03, $93, $68, $21, $26
!byte $18, $33, $63, $84, $82, $53, $30, $15, $46, $86, $19, $61, $24, $34, $87, $67, $68, $12, $97, $53, $43, $75, $94, $65, $15
!byte $80, $38, $62, $87, $59, $28, $78, $49, $02, $01, $52, $16, $85, $55, $48, $28, $71, $72, $01, $21, $92, $57, $76, $69, $54
!byte $78, $18, $28, $33, $75, $79, $93, $10, $36, $14, $74, $03, $56, $85, $64, $49, $09, $55, $27, $09, $78, $64, $79, $75, $81
!byte $16, $72, $63, $20, $10, $04, $36, $89, $78, $42, $55, $35, $39, $92, $09, $31, $83, $74, $41, $49, $78, $06, $86, $09, $84
!byte $48, $40, $30, $98, $12, $90, $77, $79, $17, $99, $08, $82, $18, $79, $53, $27, $36, $44, $75, $67, $55, $90, $84, $80, $30
!byte $87, $08, $69, $87, $55, $13, $92, $71, $18, $54, $51, $70, $78, $54, $41, $61, $85, $24, $24, $32, $06, $93, $15, $03, $32
!byte $59, $95, $94, $06, $89, $57, $56, $53, $67, $82, $10, $70, $74, $92, $69, $66, $53, $76, $76, $32, $62, $35, $44, $72, $10
!byte $69, $79, $39, $50, $67, $96, $52, $69, $47, $42, $59, $77, $09, $73, $91, $66, $69, $37, $63, $04, $26, $33, $98, $70, $85
!byte $41, $05, $26, $84, $70, $82, $99, $08, $52, $11, $39, $94, $27, $36, $57, $34, $11, $61, $82, $76, $03, $15, $00, $12, $71
!byte $65, $37, $86, $07, $36, $15, $01, $08, $08, $57, $00, $91, $49, $93, $95, $12, $55, $70, $28, $19, $87, $46, $00, $43, $75
!byte $35, $82, $90, $35, $31, $74, $34, $71, $73, $26, $93, $21, $23, $57, $81, $54, $98, $26, $29, $74, $25, $52, $73, $73, $07
!byte $94, $95, $37, $59, $76, $51, $05, $30, $59, $46, $96, $60, $67, $68, $31, $56, $57, $43, $77, $16, $74, $01, $87, $52, $75
!byte $88, $90, $28, $02, $57, $17, $33, $22, $96, $19, $17, $66, $68, $71, $38, $19, $93, $18, $11, $04, $87, $70, $19, $02, $71
!byte $25, $26, $76, $80, $27, $60, $78, $00, $30, $13, $67, $86, $80, $99, $25, $25, $46, $34, $01, $06, $16, $32, $86, $65, $26
!byte $36, $27, $02, $18, $54, $04, $97, $70, $55, $85, $62, $99, $46, $58, $06, $36, $23, $79, $93, $14, $07, $46, $25, $59, $62
!byte $24, $07, $44, $86, $90, $82, $31, $17, $49, $77, $79, $23, $65, $46, $62, $57, $24, $69, $23, $32, $28, $10, $91, $71, $41
!byte $91, $43, $02, $88, $19, $71, $03, $28, $85, $97, $80, $66, $69, $76, $08, $92, $93, $86, $38, $28, $50, $25, $33, $34, $03
!byte $34, $41, $30, $65, $57, $80, $16, $12, $78, $15, $92, $18, $15, $00, $55, $61, $86, $88, $36, $46, $84, $20, $09, $04, $70
!byte $23, $05, $30, $81, $17, $28, $16, $43, $04, $87, $62, $37, $91, $96, $98, $42, $48, $72, $55, $03, $66, $38, $78, $45, $83
!byte $11, $48, $76, $96, $93, $21, $54, $90, $28, $10, $42, $40, $20, $13, $83, $35, $12, $44, $62, $18, $14, $41, $77, $34, $70
!byte $63, $78, $32, $99, $49, $06, $36, $25, $96, $66, $49, $85, $87, $61, $82, $21, $22, $52, $25, $51, $24, $86, $76, $45, $33
!byte $67, $72, $01, $86, $97, $16, $98, $54, $43, $12, $41, $95, $72, $40, $99, $13, $95, $90, $08, $95, $23, $10, $05, $88, $22
!byte $95, $54, $82, $55, $30, $02, $63, $52, $07, $81, $53, $22, $96, $79, $62, $49, $48, $16, $41, $95, $38, $68, $21, $87, $74
!byte $76, $08, $53, $27, $13, $22, $85, $72, $31, $10, $42, $48, $03, $45, $61, $24, $86, $76, $97, $06, $45, $07, $99, $52, $36
!byte $37, $77, $42, $42, $53, $54, $11, $29, $16, $84, $27, $68, $65, $53, $89, $26, $20, $50, $24, $91, $03, $26, $57, $29, $67
!byte $23, $70, $19, $13, $27, $57, $25, $67, $52, $85, $65, $32, $48, $25, $82, $65, $46, $30, $92, $20, $70, $58, $59, $65, $22
!byte $29, $79, $88, $60, $27, $22, $58, $33, $19, $13, $12, $63, $75, $14, $73, $41, $99, $48, $89, $53, $47, $65, $74, $55, $01
!byte $18, $49, $57, $01, $45, $48, $79, $28, $89, $84, $85, $68, $27, $72, $60, $77, $71, $37, $21, $40, $37, $98, $87, $97, $15
!byte $38, $29, $82, $03, $78, $30, $31, $47, $35, $27, $72, $15, $80, $34, $81, $44, $51, $34, $91, $37, $32, $26, $65, $13, $81
!byte $34, $82, $95, $43, $82, $91, $99, $91, $81, $80, $27, $89, $16, $52, $24, $31, $02, $73, $92, $25, $11, $22, $86, $95, $39
!byte $40, $95, $79, $53, $06, $64, $05, $23, $26, $32, $53, $80, $44, $10, $00, $59, $65, $49, $39, $15, $98, $79, $59, $36, $35
!byte $29, $74, $61, $52, $18, $55, $02, $37, $13, $07, $64, $22, $55, $12, $11, $83, $69, $38, $03, $58, $03, $88, $58, $49, $03
!byte $41, $69, $81, $16, $22, $20, $72, $97, $71, $86, $15, $82, $36, $67, $84, $24, $68, $91, $57, $99, $35, $32, $96, $19, $22
!byte $62, $46, $79, $57, $19, $44, $01, $26, $90, $43, $87, $71, $07, $27, $50, $48, $10, $23, $90, $89, $55, $23, $59, $74, $57
!byte $23, $18, $97, $06, $77, $25, $47, $91, $50, $61, $50, $55, $04, $95, $39, $22, $97, $95, $30, $90, $11, $29, $96, $75, $19
!byte $86, $18, $80, $88, $22, $58, $75, $31, $45, $29, $58, $40, $99, $25, $12, $03, $82, $90, $09, $40, $77, $70, $77, $56, $72
!byte $11, $30, $67, $39, $70, $83, $04, $72, $44, $83, $81, $65, $33, $87, $35, $02, $34, $08, $45, $64, $70, $58, $07, $73, $08
!byte $82, $95, $91, $74, $76, $71, $40, $36, $31, $98, $00, $81, $87, $12, $90, $11, $87, $54, $91, $31, $05, $47, $12, $65, $81
!byte $97, $62, $33, $31, $04, $48, $18, $38, $62, $69, $51, $54, $56, $33, $49, $26, $36, $65, $72, $89, $75, $63, $40, $05, $00
!byte $42, $84, $62, $80, $18, $35, $17, $07, $05, $27, $83, $18, $39, $42, $58, $82, $14, $55, $21, $22, $72, $51, $25, $03, $27
!byte $55, $12, $16, $03, $54, $69, $81, $20, $05, $81, $76, $21, $65, $21, $28, $27, $65, $27, $51, $69, $12, $96, $89, $77, $89
!byte $32, $23, $81, $95, $73, $43, $29, $33, $99, $46, $43, $75, $01, $90, $78, $36, $94, $57, $65, $88, $33, $52, $39, $98, $86
!byte $75, $50, $61, $64, $96, $51, $84, $77, $51, $80, $73, $81, $68, $83, $78, $61, $09, $15, $27, $35, $79, $29, $70, $13, $37
!byte $62, $17, $78, $42, $75, $21, $92, $62, $34, $01, $94, $23, $99, $63, $91, $68, $04, $49, $83, $99, $31, $73, $31, $27, $31
!byte $32, $92, $41, $85, $70, $71, $47, $34, $95, $66, $91, $66, $74, $68, $76, $34, $66, $09, $15, $03, $59, $14, $67, $75, $04
!byte $99, $51, $86, $71, $43, $02, $35, $21, $96, $28, $89, $48, $90, $10, $24, $23, $32, $51, $16, $91, $36, $19, $62, $66, $22
!byte $73, $26, $74, $60, $80, $05, $91, $54, $74, $71, $83, $07, $98, $39, $28, $68, $53, $52, $06, $94, $69, $44, $54, $07, $24
!byte $76, $84, $18, $22, $52, $46, $74, $41, $71, $61, $51, $40, $36, $42, $79, $82, $27, $33, $48, $05, $55, $56, $21, $48, $18
!byte $97, $14, $26, $17, $91, $03, $42, $59, $86, $47, $20, $45, $16, $89, $39, $89, $42, $21, $79, $82, $60, $88, $07, $68, $52
!byte $87, $78, $36, $46, $18, $27, $99, $34, $63, $13, $76, $77, $54, $30, $78, $09, $36, $33, $33, $01, $89, $82, $64, $20, $90
!byte $10, $84, $88, $02, $52, $16, $74, $67, $08, $83, $21, $51, $20, $18, $58, $83, $54, $32, $23, $81, $28, $76, $95, $27, $86
!byte $71, $32, $96, $12, $47, $47, $82, $46, $45, $38, $63, $69, $93, $00, $90, $49, $31, $03, $63, $61, $97, $63, $87, $80, $39
!byte $62, $18, $40, $73, $57, $23, $99, $79, $42, $23, $40, $62, $35, $39, $38, $08, $33, $96, $51, $32, $74, $08, $01, $11, $16
!byte $66, $62, $78, $91, $98, $14, $88, $08, $77, $97, $94, $18, $76, $87, $61, $44, $23, $00, $30, $98, $44, $90, $85, $14, $11
!byte $60, $66, $18, $26, $29, $36, $82, $83, $67, $64, $74, $47, $79, $23, $91, $80, $33, $51, $10, $98, $90, $69, $79, $07, $14
!byte $85, $78, $69, $44, $08, $95, $52, $99, $06, $53, $64, $04, $47, $42, $55, $76, $08, $36, $59, $97, $66, $45, $79, $50, $96
!byte $66, $02, $43, $96, $40, $99, $05, $38, $96, $07, $12, $01, $98, $21, $99, $76, $04, $75, $99, $49, $01, $97, $23, $02, $97
!byte $64, $91, $39, $82, $68, $00, $32, $97, $31, $56, $03, $71, $20, $04, $13, $77, $90, $37, $85, $56, $60, $85, $08, $92, $52
!byte $16, $73, $09, $39, $31, $98, $72, $75, $02, $75, $46, $89, $06, $90, $37, $07, $53, $94, $13, $04, $26, $52, $31, $50, $11
!byte $94, $80, $93, $77, $24, $50, $48, $79, $51, $50, $95, $41, $00, $92, $16, $45, $86, $37, $54, $71, $05, $98, $43, $67, $91
!byte $78, $63, $91, $67, $02, $11, $87, $49, $24, $31, $99, $57, $00, $64, $19, $17, $96, $97, $77, $59, $90, $28, $30, $06, $99
!byte $15, $36, $87, $13, $71, $19, $36, $61, $49, $52, $81, $13, $05, $87, $63, $80, $27, $84, $10, $75, $44, $49, $73, $30, $78
!byte $40, $78, $99, $23, $11, $55, $35, $56, $25, $61, $14, $23, $22, $42, $32, $55, $03, $36, $85, $44, $24, $88, $91, $73, $53
!byte $44, $88, $99, $11, $50, $14, $40, $64, $80, $20, $36, $90, $68, $06, $39, $60, $67, $23, $22, $19, $32, $04, $14, $95, $35
!byte $41, $50, $31, $28, $88, $03, $39, $53, $60, $53, $29, $93, $40, $36, $80, $06, $97, $77, $10, $65, $05, $66, $63, $19, $54
!byte $81, $23, $48, $80, $67, $32, $10, $14, $67, $39, $05, $85, $68, $55, $79, $34, $58, $14, $03, $62, $78, $22, $70, $32, $80
!byte $82, $61, $65, $70, $77, $39, $48, $32, $75, $92, $23, $28, $45, $94, $17, $06, $52, $50, $94, $51, $23, $25, $23, $06, $08
!byte $22, $91, $88, $02, $05, $87, $77, $31, $97, $19, $83, $94, $50, $18, $08, $88, $07, $24, $29, $66, $19, $80, $81, $11, $97
!byte $77, $15, $85, $42, $50, $20, $16, $54, $50, $90, $41, $32, $45, $80, $97, $86, $88, $27, $78, $94, $87, $21, $85, $96, $17
!byte $72, $10, $78, $38, $43, $50, $69, $18, $61, $55, $43, $56, $62, $88, $40, $62, $25, $74, $73, $69, $22, $84, $50, $95, $16
!byte $20, $84, $96, $03, $98, $01, $34, $00, $17, $23, $93, $06, $71, $66, $68, $23, $55, $52, $45, $25, $28, $04, $60, $97, $22
!byte $53, $50, $35, $34, $22, $64, $72, $52, $42, $50, $87, $40, $54, $07, $55, $91, $78, $97, $81, $26, $43, $30, $33, $16, $90
;--------------------------------------------------------------------

; 26 bytes to store the 52 digits of the sum.
; This will be in little endian binary coded decimal.
.sum=*
!fill 26, 0

; loop counter, 0 to 99
.j=*
!byte $00

.tx=*
!byte $00

.ty=*
!byte $00

run:
   jsr subclearscreen
   +print_string .answer

   ; sum = first number
   ldy #$18         ; index of least significant byte of first number
   ldx #$00         ; index of least significant byte of sum
-  lda .numbers, y
   sta .sum, x
   inx
   dey
   bpl -
   lda #$00         ; ensure most significant byte of sum is zero.
   sta .sum, x
   
   ; set pointer to current number to the second number in the array
   clc
   lda #<.numbers
   adc #$19          ; add 25 bytes (50 digits)
   sta .cur_number
   lda #>.numbers
   adc #$00
   sta .cur_number + 1

   ; For .j = 0; .j < 99; .j++
   lda #$00
   sta .j
.forj:
   ; sum += cur_number
   sei             ; Enter BCD mode
   sed
   
   clc
   ldy #$18        ; index of least significant byte of current number
   ldx #$00        ; index of least significant byte of .sum
.cur_number=* + 1
-  lda .cur_number, y
   adc .sum, x
   sta .sum, x
   inx
   dey
   bpl -
   lda .sum, x      ; add final carry into .sum
   adc #$00
   sta .sum, x
   
   cld              ; Exit BCD mode
   cli
   
   ; .cur_number += 25 (25 bytes = 50 digits)
   clc
   lda .cur_number
   adc #$19
   sta .cur_number
   lda .cur_number + 1
   adc #$00
   sta .cur_number + 1
   
   ; .j++
   inc .j
   ; test .j < 99
   lda .j
   cmp #$63
   bcc .forj
   
   ;
   ; Output the first ten digits of sum
   ;
   lda #$00             ; use .j to count the number of digits output so far
   sta .j
   
   ldy #$19             ; index of most significant byte of .sum
   sty .ty
   
   ; output high nybble
.dohi:
   lda .sum, y         ; load current byte
   lsr                 ; isolate high 4 bits
   lsr
   lsr
   lsr
   ldx .j              ; check for first digit
   bne .outhi          ; if not zero, it must be output
   cmp #$00            ; Is A == 0?
   beq .dolo           ; A == 0 && suppressing...

.outhi:
   inc .j              ; increment digits output
   ora #$30            ; convert Binary-Coded digit to C64 screen code
   stx .tx
   sty .ty
   jsr screen_print_one_char
   ldy .ty
   ldx .tx   
   
.dolo:
   ; Is .j < 10?
   lda .j
   cmp #$0a
   bcs .done
   
   lda .sum, y         ; load current byte
   and #$0F            ; isolate low-order 4 bits

.outlo
   inc .j              ; increment digits output
   ora #$30            ; convert Binary-Coded digit to C64 screen code
   stx .tx
   sty .ty
   jsr screen_print_one_char
   ldy .ty
   ldx .tx
   
.donebyte:
   dey                 ; next byte
   sty .ty
   
   ; Is .j < 10?
   lda .j
   cmp #$0a
   bcc .dohi
   
.done:
   rts

